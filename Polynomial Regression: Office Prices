#The Problem
"""
Charlie wants to purchase office-space. He does a detailed survey of the offices and corporate complexes in the area, and tries to quantify a lot of factors, such as the distance of the offices from residential and other commercial areas, schools and workplaces; the reputation of the construction companies and builders involved in constructing the apartments; the distance of the offices from highways, freeways and important roads; the facilities around the office space and so on.

Each of these factors are quantified, normalized and mapped to values on a scale of 0 to 1. Charlie then makes a table. Each row in the table corresponds to Charlie's observations for a particular house. If Charlie has observed and noted F features, the row contains F values separated by a single space, followed by the office-space price in dollars/square-foot. If Charlie makes observations for H houses, his observation table has (F+1) columns and H rows, and a total of (F+1) * H entries.

Charlie does several such surveys and provides you with the tabulated data. At the end of these tables are some rows which have just F columns (the price per square foot is missing). Your task is to predict these prices. F can be any integer number between 1 and 5, both inclusive.

There is one important observation which Charlie has made.

The prices per square foot, are (approximately) a polynomial function of the features in the observation table. This polynomial always has an order less than 4"""

#code
# Enter your code here. Read input from STDIN. Print output to STDOUT
# Import libraries
from sklearn import linear_model
from sklearn.preprocessing import PolynomialFeatures
import numpy as np
#train
# Set data
Observed_features, No_of_house = map(int, input().split())
X, Y = [],[]

# parameters  for X and Y for discovery the variables a and b
for i in range(No_of_house):
    x = [0]
    datas = list(map(float, input().split()))
    for j in range(len(datas)):
        if j < Observed_features:
            x.append(datas[j])
        else:
            Y.append(datas[j])
    X.append(x)
    
# Initializing LinearRegression
model = linear_model.LinearRegression()


#intializing Polynomial Features
poly = PolynomialFeatures(degree=3)
model.fit(poly.fit_transform(np.array(X)), Y) 

#test
# parameters X for discovery the Y
new_No_of_house = int(input())
X_test = []
for i in range(new_No_of_house):
    x = [0]
    datas = list(map(float, input().split()))
    for j in range(len(datas)):
        x.append(datas[j])
    X_test.append(x)



    # Gets the result and show on the screen
result = model.predict(poly.fit_transform(np.array(X_test)))
for i in range(len(result)):
    print(round(result[i],2))

